From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <dev@alpha93.kr>
Date: Fri, 10 May 2024 11:31:37 +0900
Subject: [PATCH] Implement Noisium


diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 7288261b8924d08e93abecb664e2273c624a325b..a80f33c847c9196d17500b9268524bf7313f07d5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -19,8 +19,8 @@ public class LevelChunkSection {
     public static final int SECTION_HEIGHT = 16;
     public static final int SECTION_SIZE = 4096;
     public static final int BIOME_CONTAINER_BITS = 2;
-    short nonEmptyBlockCount; // Paper - package private
-    private short tickingBlockCount;
+    public short nonEmptyBlockCount; // Paper - package private // Thunderbolt - Implement noisium; why?
+    public short tickingBlockCount; // Thunderbolt - AT
     private short tickingFluidCount;
     public final PalettedContainer<BlockState> states;
     // CraftBukkit start - read/write
@@ -230,17 +230,13 @@ public class LevelChunkSection {
     // CraftBukkit end
 
     public void fillBiomesFromNoise(BiomeResolver biomeSupplier, Climate.Sampler sampler, int x, int y, int z) {
-        PalettedContainer<Holder<Biome>> datapaletteblock = this.biomes.recreate();
-        boolean flag = true;
+        // Thunderbolt start - Implement noisium; micro optimization
+        PalettedContainer<Holder<Biome>> palette = this.biomes.recreate();
 
-        for (int l = 0; l < 4; ++l) {
-            for (int i1 = 0; i1 < 4; ++i1) {
-                for (int j1 = 0; j1 < 4; ++j1) {
-                    datapaletteblock.getAndSetUnchecked(l, i1, j1, biomeSupplier.getNoiseBiome(x + l, y + i1, z + j1, sampler));
-                }
-            }
-        }
+        for (int y1 = 0; y1 < 4; ++y1) for (int z1 = 0; z1 < 4; ++z1) for (int x1 = 0; x1 < 4; ++x1)
+            palette.getAndSetUnchecked(x1, y1, z1, biomeSupplier.getNoiseBiome(x + x1, y + y1, z + z1, sampler));
 
-        this.biomes = datapaletteblock;
+        this.biomes = palette;
+        // Thunderbolt end - Implement noisium; micro optimization
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 81368bf186365878db2e1ed305bb7bf36c26f61f..c1d31b9f37472364d08b07958787410a013619cd 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -29,8 +29,8 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     private final PaletteResize<T> dummyPaletteResize = (newSize, added) -> 0;
     public final IdMap<T> registry;
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
-    private volatile PalettedContainer.Data<T> data;
-    private final PalettedContainer.Strategy strategy;
+    public volatile PalettedContainer.Data<T> data; // Thunderbolt - AT (private -> public)
+    public final PalettedContainer.Strategy strategy; // Thunderbolt - AT (private -> public)
     // private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -394,7 +394,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         void accept(T object, int count);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
+    public static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) { // Thunderbolt - AT (package-private -> public)
         public void copyFrom(Palette<T> palette, BitStorage storage) {
             for (int i = 0; i < storage.getSize(); i++) {
                 T object = palette.valueFor(storage.get(i));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index e3990d5f5a49aca501289e92f7462a5f2709db9b..03cf6ea4091d40cb65d5ecba139e2c0275074cc1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -52,6 +52,7 @@ import org.apache.commons.lang3.mutable.MutableObject;
 
 public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
+    public static boolean NOISIUM = true; // Thunderbolt - Implement noisium
     public static final MapCodec<NoiseBasedChunkGenerator> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
         return instance.group(BiomeSource.CODEC.fieldOf("biome_source").forGetter((chunkgeneratorabstract) -> {
             return chunkgeneratorabstract.biomeSource;
@@ -274,38 +275,45 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public CompletableFuture<ChunkAccess> fillFromNoise(Executor executor, Blender blender, RandomState noiseConfig, StructureManager structureAccessor, ChunkAccess chunk) {
-        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().clampToHeightAccessor(chunk.getHeightAccessorForGeneration());
-        int i = noisesettings.minY();
-        int j = Mth.floorDiv(i, noisesettings.getCellHeight());
-        int k = Mth.floorDiv(noisesettings.height(), noisesettings.getCellHeight());
-
-        if (k <= 0) {
-            return CompletableFuture.completedFuture(chunk);
-        } else {
-            int l = chunk.getSectionIndex(k * noisesettings.getCellHeight() - 1 + i);
-            int i1 = chunk.getSectionIndex(i);
-            Set<LevelChunkSection> set = Sets.newHashSet();
-
-            for (int j1 = l; j1 >= i1; --j1) {
-                LevelChunkSection chunksection = chunk.getSection(j1);
-
-                chunksection.acquire();
-                set.add(chunksection);
-            }
-
-            return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName("wgen_fill_noise", () -> {
-                return this.doFill(blender, structureAccessor, noiseConfig, chunk, j, k);
-            }), executor).whenCompleteAsync((ichunkaccess1, throwable) -> { // Paper - run with supplied executor
-                Iterator iterator = set.iterator();
+        // Thunderbolt start - Implement noisium
+        NoiseSettings settings = this.settings.value().noiseSettings().clampToHeightAccessor(chunk.getHeightAccessorForGeneration());
+        int minY = settings.minY();
+        int minYDiv = Mth.floorDiv(minY, settings.getCellHeight());
+        int cellHeightDiv = Mth.floorDiv(settings.height(), settings.getCellHeight());
+
+        if (cellHeightDiv <= 0) return CompletableFuture.completedFuture(chunk);
+
+        int startIndex = chunk.getSectionIndex(cellHeightDiv * settings.getCellHeight() - 1 + minY);
+        int minYIndex = chunk.getSectionIndex(minY);
+
+        if (NOISIUM) {
+            LevelChunkSection[] sections = chunk.getSections();
+            for (int i = startIndex; i >= minYIndex; --i) sections[i].acquire();
+
+            return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName(
+                    "wgen_fill_noise",
+                    () -> this.doFill(blender, structureAccessor, noiseConfig, chunk, minYDiv, cellHeightDiv)
+            ), Util.backgroundExecutor()).whenCompleteAsync((result, ignored) -> {
+                for (int i = startIndex; i >= minYIndex; --i) sections[i].release();
+            }, executor);
+        }
 
-                while (iterator.hasNext()) {
-                    LevelChunkSection chunksection1 = (LevelChunkSection) iterator.next();
+        Set<LevelChunkSection> set = Sets.newHashSet();
 
-                    chunksection1.release();
-                }
+        for (int i = startIndex; i >= minYIndex; --i) {
+            LevelChunkSection section = chunk.getSection(i);
 
-            }, executor);
+            section.acquire();
+            set.add(section);
         }
+
+        return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName(
+                "wgen_fill_noise",
+                () -> this.doFill(blender, structureAccessor, noiseConfig, chunk, minYDiv, cellHeightDiv)
+        ), executor).whenCompleteAsync((ignored1, ignored2) -> {
+            for (LevelChunkSection result : set) result.release();
+        }, executor);
+        // Thunderbolt end
     }
 
     private ChunkAccess doFill(Blender blender, StructureManager structureAccessor, RandomState noiseConfig, ChunkAccess chunk, int minimumCellY, int cellHeight) {
@@ -371,6 +379,20 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
                                 iblockdata = this.debugPreliminarySurfaceLevel(noisechunk, j4, j3, i5, iblockdata);
                                 if (iblockdata != NoiseBasedChunkGenerator.AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
+                                    if (NOISIUM) {
+                                        // Thunderbolt start - Implement noisium
+                                        chunksection.nonEmptyBlockCount++;
+
+                                        if (!iblockdata.getFluidState().isEmpty()) chunksection.nonEmptyBlockCount++;
+                                        if (iblockdata.isRandomlyTicking()) chunksection.tickingBlockCount++;
+
+                                        chunksection.states.data.storage().set(
+                                                chunksection.states.strategy.getIndex(k4, k3, j5),
+                                                chunksection.states.data.palette().idFor(iblockdata)
+                                        );
+                                        // Thunderbolt end - Implement noisium
+                                    }
+
                                     chunksection.setBlockState(k4, k3, j5, iblockdata, false);
                                     heightmap.update(k4, j3, j5, iblockdata);
                                     heightmap1.update(k4, j3, j5, iblockdata);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 52fcf1b92854e5c67c51a83d31b4a136413b54e0..e2b07363d4c902739e88927daefbefe24f40891b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,12 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+// Thunderbolt start - Implement noisium
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical, int cellHeight, int cellWidth) {
+    public NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+        this(minY, height, noiseSizeHorizontal, noiseSizeVertical, QuartPos.toBlock(noiseSizeHorizontal), QuartPos.toBlock(noiseSizeVertical));
+    }
+// Thunderbolt end - Implement noisium
     public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create(
             instance -> instance.group(
                         Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY),
@@ -44,11 +49,11 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public int getCellHeight() {
-        return QuartPos.toBlock(this.noiseSizeVertical());
+        return this.cellHeight; // Thunderbolt - Implement noisium
     }
 
     public int getCellWidth() {
-        return QuartPos.toBlock(this.noiseSizeHorizontal());
+        return this.cellWidth; // Thunderbolt - Implement noisium
     }
 
     public NoiseSettings clampToHeightAccessor(LevelHeightAccessor world) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index afdbc74a3012fa717f59ecef613567338d285b7b..23fb7d811772804c7256981bbaca4ad7673a5e31 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -12,9 +12,7 @@ public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> materialRuleLis
     public BlockState calculate(DensityFunction.FunctionContext pos) {
         for (NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
             BlockState blockState = blockStateFiller.calculate(pos);
-            if (blockState != null) {
-                return blockState;
-            }
+            if (blockState == null) continue; return blockState; // Thunderbolt - Implement noisium
         }
 
         return null;
diff --git a/src/main/java/org/plazmamc/thunderbolt/configurations/GlobalConfiguration.java b/src/main/java/org/plazmamc/thunderbolt/configurations/GlobalConfiguration.java
index 1b1d08f00716551a26a5cee1133d2ce77fc8d1b7..ced99d9c788d0a9b9db60e58a9ef4ad910aa1d3a 100644
--- a/src/main/java/org/plazmamc/thunderbolt/configurations/GlobalConfiguration.java
+++ b/src/main/java/org/plazmamc/thunderbolt/configurations/GlobalConfiguration.java
@@ -28,10 +28,12 @@ public class GlobalConfiguration extends ConfigurationPart {
     public NeedsReload needsReload;
     public class NeedsReload extends ConfigurationPart {
 
+        boolean enableNoisium = optimize();
 
         @PostProcess
         public void post() {
             boolean changed = ThunderboltConfigurations.GLOBAL_LOADED;
+            changed &= this.enableNoisium != net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator.NOISIUM;
 
             if (changed) {
                 ThunderboltConfigurations.LOGGER.warn("Configuration settings that require a restart have been changed."
@@ -39,6 +41,7 @@ public class GlobalConfiguration extends ConfigurationPart {
                 return;
             }
 
+            net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator.NOISIUM = this.enableNoisium;
         }
 
     }
