From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <dev@alpha93.kr>
Date: Sun, 25 Feb 2024 19:13:15 +0900
Subject: [PATCH] Volt Configurations


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index cf13166d1fdd663f1f99fd6d00a5296631276511..a8b99e47440ea27be80c3db1c824f681bdf7337c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -315,6 +315,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations; // Paper - add paper configuration files
     public final org.plazmamc.plazma.configurations.PlazmaConfigurations plazmaConfigurations; // Plazma - Configurable Plazma
+    public final org.plazmamc.volt.configurations.VoltConfigurations voltConfigurations; // Volt - Add Example Configurations patch
     public static long currentTickLong = 0L; // Paper - track current tick as a long
     public boolean isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
     public boolean lagging = false; // Purpur
@@ -428,6 +429,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // CraftBukkit end
         this.paperConfigurations = services.paperConfigurations(); // Paper - add paper configuration files
         this.plazmaConfigurations = services.plazmaConfigurations(); // Plazma - Configurable Plazma
+        this.voltConfigurations = services.voltConfigurations(); // Volt - add volt configuration files
     }
 
     private void readScoreboard(DimensionDataStorage persistentStateManager) {
diff --git a/src/main/java/net/minecraft/server/Services.java b/src/main/java/net/minecraft/server/Services.java
index 4f1071c48fec78036d6759cdff179df3182f28f5..5e40ebece9a5a920aafcba56efb8fff342a074c5 100644
--- a/src/main/java/net/minecraft/server/Services.java
+++ b/src/main/java/net/minecraft/server/Services.java
@@ -19,6 +19,7 @@ public record Services(
     GameProfileCache profileCache,
     @org.jetbrains.annotations.Nullable io.papermc.paper.configuration.PaperConfigurations paperConfigurations,
     @org.jetbrains.annotations.Nullable org.plazmamc.plazma.configurations.PlazmaConfigurations plazmaConfigurations
+    ,@org.jetbrains.annotations.Nullable org.plazmamc.volt.configurations.VoltConfigurations voltConfigurations // Volt - Add Example Configurations patch
     // Plazma end - Configurable Plazma
 ) {
     // Paper start - add paper configuration files
@@ -31,9 +32,17 @@ public record Services(
             profileCache,
             null,
             null
+            ,null // Volt - Add Example Configurations patch
         );
     }
 
+    // Volt start - Add Example Configurations patch
+    @Override
+    public org.plazmamc.volt.configurations.VoltConfigurations voltConfigurations() {
+        return java.util.Objects.requireNonNull(this.voltConfigurations);
+    }
+    // Volt end - Add Example Configurations patch
+
     @Override
     public org.plazmamc.plazma.configurations.PlazmaConfigurations plazmaConfigurations() {
         return java.util.Objects.requireNonNull(this.plazmaConfigurations);
@@ -63,6 +72,7 @@ public record Services(
             gameProfileCache,
             paperConfigurations,
             new org.plazmamc.plazma.configurations.PlazmaConfigurations(optionSet)
+            ,new org.plazmamc.volt.configurations.VoltConfigurations(optionSet) // Volt - Add Example Configurations patch
         );
         // Plazma end
         // Paper end - load paper config files from cli options
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 68563b59d0e028483d0f7f17c81ec87b8963db2e..6f06eb9530d59e0d72e5ef162428c51cd5de9529 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -215,6 +215,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.plazmaConfigurations.initializeGlobalConfiguration(this.registryAccess()); // Plazma - Configurable Plazma
         this.plazmaConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess()); // Plazma - Configurable Plazma
         net.sparklypower.sparklypaper.HalloweenManager.startSyncEpochTask(); // Plazma - Port SparklyPaper patches; Optimize Spooky Season
+        this.voltConfigurations.initializeGlobalConfiguration(this.registryAccess()); // Volt - Add volt configuration files
+        this.voltConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess()); // Volt - Add volt configuration files
         // Paper end - initialize global and world-defaults configuration
         // Plazma - Tweak console logging; Moved down
         // Paper start - detect running as root
@@ -237,6 +239,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.start(); // Paper - Enhance console tab completions for brigadier commands; start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this); // Paper - setup /paper command
         org.plazmamc.plazma.commands.Commands.register(this); // Plazma - Configurable Plazma
+        org.plazmamc.volt.commands.Commands.register(this); // Volt - Add volt configuration files
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics(); // Paper - start metrics
         // Purpur start
         try {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 15548aac320ae6d707cab4a61dfc99eaebb06634..a4ab5b3a851ca4bc22371c4b6429fa26bc37fe48 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -724,6 +724,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             env,
             spigotConfig -> minecraftserver.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess(), iworlddataserver.getGameRules())),
             spigotConfig -> minecraftserver.plazmaConfigurations.createWorldConfig(org.plazmamc.plazma.configurations.PlazmaConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess(), iworlddataserver.getGameRules())),
+            spigotConfig -> minecraftserver.voltConfigurations.createWorldConfig(org.plazmamc.volt.configurations.VoltConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess(), iworlddataserver.getGameRules())), // Volt - Add Example Configurations patch
             executor
         );
         // Plazma end - Configurable Plazma
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 16531bcbdfe80c7e3d553aa6fce576588e2e3b0e..edb3a943a3a34e221af533cb6fca2a19a5bd2dcc 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -174,6 +174,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.plazmaConfig;
     }
     // Plazma end - Configurable Plazma
+    // Volt start - Add Example Configurations patch
+    private final org.plazmamc.volt.configurations.WorldConfigurations voltConfig;
+    public org.plazmamc.volt.configurations.WorldConfigurations voltConfig() {
+        return this.voltConfig;
+    }
+    // Volt end - Add Example Configurations patch
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
@@ -272,12 +278,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         org.bukkit.World.Environment env,
         java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator,
         java.util.function.Function<org.spigotmc.SpigotWorldConfig, org.plazmamc.plazma.configurations.WorldConfigurations> plazmaWorldConfigurationCreator,
+        java.util.function.Function<org.spigotmc.SpigotWorldConfig, org.plazmamc.volt.configurations.WorldConfigurations> voltWorldConfigurationCreator, // Volt - Add Example Configurations patch
         java.util.concurrent.Executor executor
     ) {
     // Plazma end - Configurable Plazma
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper - create paper world config
         this.plazmaConfig = plazmaWorldConfigurationCreator.apply(this.spigotConfig); // Plazma - Configurable Plazma
+        this.voltConfig = voltWorldConfigurationCreator.apply(this.spigotConfig); // Volt - Add Example Configurations patch
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 24b8c2dfb41e97adee90849d56f13583b6cafcc0..a430daedae66716ebff850a7f4c927c799f29640 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1060,6 +1060,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         this.console.plazmaConfigurations.reloadConfigs(this.console); // Plazma - Configurable Plazma
+        this.console.voltConfigurations.reloadConfigs(this.console); // Volt - Add Volt Configurations
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
@@ -3132,6 +3133,13 @@ public final class CraftServer implements Server {
         }
         // Plazma end - Configurable Plazma
 
+        // Volt start - Add Example Configurations patch
+        @Override @org.jetbrains.annotations.NotNull
+        public YamlConfiguration getVoltConfig() {
+            return CraftServer.this.console.voltConfigurations.createLegacyObject(CraftServer.this.console);
+        }
+        // Volt end - Add Example Configurations patch
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index f84266bca823be3fe7d26ac59b181424e1e307ef..57d7c2a310c000c39e0c44ec54d19cc123db312f 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -205,6 +205,14 @@ public class Main {
                     .defaultsTo(new File(org.plazmamc.plazma.configurations.PlazmaConfigurations.CONFIG_DIR))
                     .describedAs("Configuration Directory");
                 // Plazma end - Configurable Plazma
+
+                // Volt start - Add Example Configurations patch
+                acceptsAll(asList("volt-dir", "volt-settings-directory"), "Directory for Volt settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File(org.plazmamc.volt.configurations.VoltConfigurations.CONFIG_DIR))
+                        .describedAs("Configuration Directory");
+                // Volt end - Add Example Configurations patch
             }
         };
 
diff --git a/src/main/java/org/plazmamc/volt/commands/Commands.java b/src/main/java/org/plazmamc/volt/commands/Commands.java
new file mode 100644
index 0000000000000000000000000000000000000000..3ca79a5091494d06fd2985a8ab27f097383d44de
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/commands/Commands.java
@@ -0,0 +1,23 @@
+package org.plazmamc.volt.commands;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+import org.plazmamc.volt.commands.volt.VoltCommand;
+
+import java.util.HashMap;
+import java.util.Map;
+
+@DefaultQualifier(NotNull.class)
+public class Commands {
+
+    private static final Map<String, Command> COMMANDS = new HashMap<>() {{
+        put("volt", new VoltCommand("volt"));
+    }};
+
+    public static void register(final MinecraftServer server) {
+        COMMANDS.forEach((name, command) -> server.server.getCommandMap().register(name, "Volt", command));
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/commands/VoltSubCommand.java b/src/main/java/org/plazmamc/volt/commands/VoltSubCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..28832f22527ffd770506fbdc27b32eea70ee3817
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/commands/VoltSubCommand.java
@@ -0,0 +1,19 @@
+package org.plazmamc.volt.commands;
+
+import org.bukkit.command.CommandSender;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collections;
+import java.util.List;
+
+@DefaultQualifier(NotNull.class)
+public interface VoltSubCommand {
+
+    boolean execute(final CommandSender sender, final String subCommand, final String[] args);
+
+    default List<String> tabComplete(final CommandSender sender, final String subCommand, final String[] args) {
+        return Collections.emptyList();
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/commands/volt/VoltCommand.java b/src/main/java/org/plazmamc/volt/commands/volt/VoltCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..92de73a92e936a54451585d3e82dee008deb271a
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/commands/volt/VoltCommand.java
@@ -0,0 +1,119 @@
+package org.plazmamc.volt.commands.volt;
+
+import io.papermc.paper.command.CommandUtil;
+import net.kyori.adventure.text.format.NamedTextColor;
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.Util;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.plazmamc.volt.commands.VoltSubCommand;
+import org.plazmamc.volt.commands.volt.subcommand.ReloadCommand;
+import org.plazmamc.volt.commands.volt.subcommand.VersionCommand;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+import static net.kyori.adventure.text.Component.text;
+
+@DefaultQualifier(NotNull.class)
+public class VoltCommand extends Command {
+
+    private static final String PERMISSION = "bukkit.command.volt";
+
+    private static final Map<String, VoltSubCommand> SUB_COMMANDS = Util.make(() -> {
+        final Map<Set<String>, VoltSubCommand> commands = new HashMap<>() {{
+            put(Set.of("reload"), new ReloadCommand());
+            put(Set.of("version"), new VersionCommand());
+        }};
+
+        return commands.entrySet().stream()
+                .flatMap(entry -> entry.getKey().stream().map(key -> Map.entry(key, entry.getValue())))
+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+    });
+
+    private static final Map<String, String> ALIASES = Util.make(() -> {
+        final Map<String , Set<String>> aliases = new HashMap<>() {{
+            put("reload", Set.of("rl"));
+            put("version", Set.of("ver"));
+        }};
+
+        return aliases.entrySet().stream()
+                .flatMap(entry -> entry.getValue().stream().map(val -> Map.entry(val, entry.getKey())))
+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+    });
+
+    public VoltCommand(final String name) {
+        super(name);
+
+        final List<String> permissions = new ArrayList<>() {{
+            add(PERMISSION);
+            addAll(SUB_COMMANDS.keySet().stream().map(key -> PERMISSION + "." + key).toList());
+        }};
+
+        this.description = "Volt related commands";
+        this.usageMessage = String.format("/volt [%s]", String.join("|", SUB_COMMANDS.keySet()));
+        this.setPermission(String.join(";", permissions));
+
+        permissions.forEach(perm -> Bukkit.getServer().getPluginManager().addPermission(new Permission(perm, PermissionDefault.OP)));
+    }
+
+    @Override
+    public boolean execute(final CommandSender sender, final String commandLabel, final String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length == 0) {
+            sender.sendMessage(text("Usage: " + this.usageMessage, NamedTextColor.RED));
+            return false;
+        }
+
+        final @Nullable Pair<String, VoltSubCommand> subCommand = resolveSubCommand(args[0]);
+
+        if (subCommand == null) {
+            sender.sendMessage(text("Usage: " + this.usageMessage, NamedTextColor.RED));
+            return false;
+        }
+
+        if (!testPermission(sender, subCommand.first())) return true;
+
+        return subCommand.second().execute(sender, subCommand.first(), Arrays.copyOfRange(args, 1, args.length));
+    }
+
+    @Override
+    public List<String> tabComplete(final CommandSender sender, final String aliases, final String[] args) throws IllegalArgumentException {
+        if (args.length <= 1) return CommandUtil.getListMatchingLast(sender, args, SUB_COMMANDS.keySet());
+
+        final @Nullable Pair<String, VoltSubCommand> subCommand = resolveSubCommand(args[0]);
+
+        if (subCommand != null) return subCommand.second().tabComplete(sender, subCommand.first(), Arrays.copyOfRange(args, 1, args.length));
+        return Collections.emptyList();
+    }
+
+    private static boolean testPermission(final CommandSender sender, final String permission) {
+        if (sender.hasPermission(PERMISSION + "." + permission) || sender.hasPermission(PERMISSION)) return true;
+        sender.sendMessage(Bukkit.permissionMessage());
+        return false;
+    }
+
+    private static @Nullable Pair<String, VoltSubCommand> resolveSubCommand(String label) {
+        label = label.toLowerCase();
+        @Nullable VoltSubCommand subCommand = SUB_COMMANDS.get(label);
+
+        if (subCommand == null) {
+            final @Nullable String command = ALIASES.get(label);
+            if (command != null) {
+                label = command;
+                subCommand = SUB_COMMANDS.get(label);
+            }
+        }
+
+        if (subCommand != null) return Pair.of(label, subCommand);
+        return null;
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/commands/volt/subcommand/ReloadCommand.java b/src/main/java/org/plazmamc/volt/commands/volt/subcommand/ReloadCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..849d337d2d48a945ee382eaeb51e29768a2b82dd
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/commands/volt/subcommand/ReloadCommand.java
@@ -0,0 +1,34 @@
+package org.plazmamc.volt.commands.volt.subcommand;
+
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+import org.plazmamc.volt.commands.VoltSubCommand;
+
+import static net.kyori.adventure.text.Component.text;
+
+@DefaultQualifier(NotNull.class)
+public class ReloadCommand implements VoltSubCommand {
+
+    @Override
+    public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
+        reload(sender);
+        return true;
+    }
+
+    private static void reload(final CommandSender sender) {
+        Command.broadcastCommandMessage(sender, text("Please note that this command is not supported and may cause issues.", NamedTextColor.RED));
+        Command.broadcastCommandMessage(sender, text("If you encounter any issues please use the /stop command to restart your server.", NamedTextColor.RED));
+
+        MinecraftServer server = ((CraftServer) sender.getServer()).getServer();
+        server.voltConfigurations.reloadConfigs(server);
+        server.server.reloadCount++;
+
+        Command.broadcastCommandMessage(sender, text("Successfully reloaded Plazma configuration files.", NamedTextColor.GREEN));
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/commands/volt/subcommand/VersionCommand.java b/src/main/java/org/plazmamc/volt/commands/volt/subcommand/VersionCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..633127d196bdbfd0d98c78046fb2c7b1cca2aefa
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/commands/volt/subcommand/VersionCommand.java
@@ -0,0 +1,21 @@
+package org.plazmamc.volt.commands.volt.subcommand;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.plazmamc.volt.commands.VoltSubCommand;
+
+@DefaultQualifier(NotNull.class)
+public class VersionCommand implements VoltSubCommand {
+
+    @Override
+    public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
+        final @Nullable Command ver = MinecraftServer.getServer().server.getCommandMap().getCommand("version");
+        if (ver != null) return ver.execute(sender, "plazma", new String[0]);
+        return false;
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/configurations/GlobalConfiguration.java b/src/main/java/org/plazmamc/volt/configurations/GlobalConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f3cf61b85b92c8b9783323a98140e8d2fbc3307
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/configurations/GlobalConfiguration.java
@@ -0,0 +1,26 @@
+package org.plazmamc.volt.configurations;
+
+import io.papermc.paper.configuration.Configuration;
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.jetbrains.annotations.NotNull;
+import org.spongepowered.configurate.objectmapping.meta.Setting;
+import org.spongepowered.configurate.objectmapping.meta.PostProcess;
+
+@SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "InnerClassMayBeStatic"})
+public class GlobalConfiguration extends ConfigurationPart {
+
+    private static GlobalConfiguration INSTANCE;
+    static final int VERSION = 1;
+
+    public static GlobalConfiguration get() {
+        return INSTANCE;
+    }
+
+    static void set(final @NotNull GlobalConfiguration instance) {
+        GlobalConfiguration.INSTANCE = instance;
+    }
+
+    @Setting(Configuration.VERSION_FIELD)
+    int version = VERSION;
+
+}
diff --git a/src/main/java/org/plazmamc/volt/configurations/RemovedConfigurations.java b/src/main/java/org/plazmamc/volt/configurations/RemovedConfigurations.java
new file mode 100644
index 0000000000000000000000000000000000000000..4dd948fe3c71675e6bbe95f412d265af484028df
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/configurations/RemovedConfigurations.java
@@ -0,0 +1,13 @@
+package org.plazmamc.volt.configurations;
+
+import org.spongepowered.configurate.NodePath;
+
+interface RemovedConfigurations {
+
+    NodePath[] WORLD_PATHS = {
+    };
+
+    NodePath[] GLOBAL_PATHS = {
+    };
+
+}
diff --git a/src/main/java/org/plazmamc/volt/configurations/VoltConfigurations.java b/src/main/java/org/plazmamc/volt/configurations/VoltConfigurations.java
new file mode 100644
index 0000000000000000000000000000000000000000..3ee9f9ba02e410907a9df6abddc64cad68a4383e
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/configurations/VoltConfigurations.java
@@ -0,0 +1,208 @@
+package org.plazmamc.volt.configurations;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.ConfigurationPart;
+import io.papermc.paper.configuration.Configurations;
+import joptsimple.OptionSet;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.server.level.ServerLevel;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.VisibleForTesting;
+import org.slf4j.Logger;
+import org.spongepowered.configurate.ConfigurationOptions;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.BasicConfigurationNode;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.NodePath;
+
+import java.io.File;
+import java.nio.file.Path;
+import java.util.function.Function;
+
+import static io.leangen.geantyref.GenericTypeReflector.erase;
+
+@DefaultQualifier(NotNull.class)
+public class VoltConfigurations extends Configurations<GlobalConfiguration, WorldConfigurations> {
+
+    public static final String CONFIG_DIR = "config";
+    static final Logger LOGGER = LogUtils.getLogger();
+    static final String GLOBAL_CONFIG_FILE_NAME = "volt_global.yaml";
+    static final String WORLD_DEFAULT_CONFIG_FILE_NAME = "volt_worlds.yaml";
+    static final String WORLD_CONFIG_FILE_NAME = "volt_configurations.yaml";
+
+    private static final String HEADER_START = """
+            ### ENGLISH ###
+            Volt is a template project that helps you fork your Plazma easily.
+            This software is not suitable for use as a regular server. If you
+            are not a fork developer, and you just want to run a server,
+            please use Plazma.
+            
+            %s
+            
+            ### KOREAN ###
+            Volt는 Plazma를 쉽게 포크할 수 있도록 도와주는 템플릿 프로젝트입니다.
+            이 소프트웨어는 일반 서버로 사용하기 적합하지 않습니다. 당신이 포크
+            개발자가 아니고, 단지 서버를 운영하고 싶다면, Plazma를 사용해 주십시오.
+            
+            %s
+
+            GitHub: https://github.com/PlazmaMC/Volt
+            Development Guide: https://github.com/PlazmaMC/Volt/wiki
+            
+            Download Plazma: https://github.com/PlazmaMC/PlazmaBukkit?tab=readme-ov-file#️-downloads
+            Discord: https://plazmamc.org/discord
+            """;
+
+    private static final String GLOBAL_HEADER = HEADER_START.formatted("""
+            Below are several template values set in GlobalConfiguration.java.
+            Refer to the class for more information on how the configuration applies.
+            These are values that apply to the **entire server** regardless of
+            the world. However, you must take advantage of the system properties
+            in order for the server to be able to modify the values before
+            loading the configuration. See org.plazmamc.volt.Options class for
+            development of system properties.
+            """, """
+            아래에는 GlobalConfiguration.java에 설정된 여러 템플릿 값들이 있습니다.
+            구성이 적용되는 여러 방법은 해당 클래스를 참고하세요.
+            이 값들은 월드에 관계 없이 **서버 전체**에 적용되는 값들입니다. 다만, 서버가 구성을
+            로드하기 전의 값을 수정할 수 있게 만드려면, 시스템 속성을 이용해야 합니다.
+            시스템 속성에 대한 개발은 org.plazmamc.volt.Options 클래스를 참고하세요.
+            """
+    );
+
+    private static final String WORLD_DEFAULT_HEADER = HEADER_START.formatted("""
+            Below are several template values that are set in WorldConfigurations.java.
+            Refer to the class for more information on how the configuration applies.
+            These are values that apply to the **entire game (world)** regardless
+            of the world. However, these world configurations can be set to
+            override values that apply only to that world through the
+            %WORLD_CONFIG_FILE_NAME% file in the world folder.
+            """, """
+            아래에는 WorldConfigurations.java에 설정된 여러 템플릿 값들이 있습니다.
+            구성이 적용되는 여러 방법은 해당 클래스를 참고하세요.
+            이 값들은 월드에 관계 없이 **게임(월드) 전체**에 적용되는 값들입니다. 다만,
+            이러한 월드 구성은 월드 폴더 내에 있는 %WORLD_CONFIG_FILE_NAME% 파일을 통해
+            해당 월드에만 적용되는 덮어쓰기 값을 설정할 수 있습니다.
+            """
+    ).replace("%WORLD_CONFIG_FILE_NAME%", WORLD_CONFIG_FILE_NAME);
+
+    private static final Function<ContextMap, String> WORLD_HEADER = map -> """
+            ### ENGLISH ###
+            This file is a Volt configuration file for %s (%s) world only.
+            This file is empty in its initial state, but you can populate the
+            values set in the %s file to override them.
+            
+            ### KOREAN ###
+            본 파일은 %s (%s) 월드 전용 Volt 구성 파일입니다.
+            이 파일은 초기 상태에는 비어있지만, %s 파일에 설정된 값을 덮어쓰기 위해 값을 채워
+            넣을 수 있습니다.
+            """.formatted(
+            map.require(WORLD_NAME), map.require(WORLD_KEY), WORLD_CONFIG_FILE_NAME,
+            map.require(WORLD_NAME), map.require(WORLD_KEY), WORLD_CONFIG_FILE_NAME
+    );
+
+    public VoltConfigurations(final OptionSet optionSet) {
+        super(((File) optionSet.valueOf("volt-settings-directory")).toPath());
+    }
+
+    @Override
+    protected Class<GlobalConfiguration> globalConfigClass() {
+        return GlobalConfiguration.class;
+    }
+
+    @Override
+    protected String globalConfigFileName() {
+        return GLOBAL_CONFIG_FILE_NAME;
+    }
+
+    @Override
+    protected NodePath[] removedGlobalPaths() {
+        return RemovedConfigurations.GLOBAL_PATHS;
+    }
+
+    @Override
+    protected GlobalConfiguration getGlobalConfiguration() {
+        return GlobalConfiguration.get();
+    }
+
+    @Override
+    protected int globalConfigVersion() {
+        return GlobalConfiguration.VERSION;
+    }
+
+    @Override
+    protected Class<WorldConfigurations> worldConfigClass() {
+        return WorldConfigurations.class;
+    }
+
+    @Override
+    protected String defaultWorldConfigFileName() {
+        return WORLD_DEFAULT_CONFIG_FILE_NAME;
+    }
+
+    @Override
+    protected String worldConfigFileName() {
+        return WORLD_CONFIG_FILE_NAME;
+    }
+
+    @Override
+    protected String worldDefaultHeader() {
+        return WORLD_DEFAULT_HEADER;
+    }
+
+    @Override
+    protected NodePath[] removedWorldPaths() {
+        return RemovedConfigurations.WORLD_PATHS;
+    }
+
+    @Override
+    protected WorldConfigurations getWorldConfiguration(ServerLevel level) {
+        return level.voltConfig();
+    }
+
+    @Override
+    protected int worldConfigVersion() {
+        return WorldConfigurations.VERSION;
+    }
+
+    @Override
+    protected String buildWorldHeader(ContextMap contextMap) {
+        return WORLD_HEADER.apply(contextMap);
+    }
+
+    @Override
+    protected YamlConfigurationLoader.Builder createGlobalLoaderBuilder() {
+        return super.createGlobalLoaderBuilder()
+                .defaultOptions(VoltConfigurations::defaultGlobalOptions);
+    }
+
+    @Override
+    public GlobalConfiguration initializeGlobalConfiguration(final RegistryAccess registryAccess) throws ConfigurateException {
+        GlobalConfiguration configuration = super.initializeGlobalConfiguration(registryAccess);
+        GlobalConfiguration.set(configuration);
+        return configuration;
+    }
+
+    @Override
+    protected WorldConfigurations createWorldConfigInstance(ContextMap contextMap) {
+        return new WorldConfigurations(contextMap.require(WORLD_KEY));
+    }
+
+    private static ConfigurationOptions defaultGlobalOptions(
+            final ConfigurationOptions options
+    ) {
+        return options.header(GLOBAL_HEADER);
+    }
+
+    @VisibleForTesting
+    static ConfigurationNode createForTesting() {
+        ObjectMapper.Factory factory = defaultGlobalFactoryBuilder(ObjectMapper.factoryBuilder()).build();
+        ConfigurationOptions options = defaultGlobalOptions(defaultOptions(ConfigurationOptions.defaults()))
+                .serializers(builder -> builder.register(type -> ConfigurationPart.class.isAssignableFrom(erase(type)), factory.asTypeSerializer()));
+        return BasicConfigurationNode.root(options);
+    }
+
+}
diff --git a/src/main/java/org/plazmamc/volt/configurations/WorldConfigurations.java b/src/main/java/org/plazmamc/volt/configurations/WorldConfigurations.java
new file mode 100644
index 0000000000000000000000000000000000000000..ecbc1118b7c7fe6463f612a7a9f0f699af959122
--- /dev/null
+++ b/src/main/java/org/plazmamc/volt/configurations/WorldConfigurations.java
@@ -0,0 +1,23 @@
+package org.plazmamc.volt.configurations;
+
+import io.papermc.paper.configuration.Configuration;
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.jetbrains.annotations.NotNull;
+import net.minecraft.resources.ResourceLocation;
+import org.spongepowered.configurate.objectmapping.meta.PostProcess;
+import org.spongepowered.configurate.objectmapping.meta.Setting;
+
+@SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "InnerClassMayBeStatic"})
+public class WorldConfigurations extends ConfigurationPart {
+
+    static final int VERSION = 1;
+
+    private transient final ResourceLocation worldKey;
+    public WorldConfigurations(final @NotNull ResourceLocation worldKey) {
+        this.worldKey = worldKey;
+    }
+
+    @Setting(Configuration.VERSION_FIELD)
+    int version = VERSION;
+
+}
diff --git a/src/test/java/org/bukkit/support/AbstractTestingBase.java b/src/test/java/org/bukkit/support/AbstractTestingBase.java
index 74af3501397bfd89d637ad5ce72bb8f2c2bbdc8a..1393fb567b7804c620faf699789f87866c27482a 100644
--- a/src/test/java/org/bukkit/support/AbstractTestingBase.java
+++ b/src/test/java/org/bukkit/support/AbstractTestingBase.java
@@ -65,6 +65,7 @@ public abstract class AbstractTestingBase {
         DummyServer.setup();
         io.papermc.paper.configuration.GlobalConfigTestingBase.setupGlobalConfigForTest(); // Paper
         org.plazmamc.plazma.configurations.GlobalConfigurationTestingBase.setupGlobalConfigForTest(); // Plazma - Configurable Plazma
+        org.plazmamc.volt.configurations.GlobalConfigurationTestingBase.setupGlobalConfigurationForTesting(); // Volt - Add Example Configurations patch
 
         CraftRegistry.setMinecraftRegistry(REGISTRY_CUSTOM);
 
diff --git a/src/test/java/org/plazmamc/volt/configurations/GlobalConfigurationTestingBase.java b/src/test/java/org/plazmamc/volt/configurations/GlobalConfigurationTestingBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..71d8bf545a3e83955eb9d4aef493a4b81c92fc17
--- /dev/null
+++ b/src/test/java/org/plazmamc/volt/configurations/GlobalConfigurationTestingBase.java
@@ -0,0 +1,17 @@
+package org.plazmamc.volt.configurations;
+
+import org.spongepowered.configurate.ConfigurationNode;
+
+public class GlobalConfigurationTestingBase {
+
+    public static void setupGlobalConfigurationForTesting() {
+        if (GlobalConfiguration.get() != null) return;
+        ConfigurationNode node = VoltConfigurations.createForTesting();
+        try {
+            GlobalConfiguration.set(node.require(GlobalConfiguration.class));
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+}
